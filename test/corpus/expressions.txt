======================
binary expressions
======================
a + 1
a - b * c
a / b + c
a
-b
a-
b
---
(source_file
 (binary_expression
  (identifier)
  (number))
 (binary_expression
  (identifier)
  (binary_expression
   (identifier)
   (identifier)))
 (binary_expression
  (binary_expression
   (identifier)
   (identifier))
  (identifier))
 (binary_expression
  (identifier)
  (identifier))
 (binary_expression
  (identifier)
  (identifier)))


========================
parenthesized expression
========================
(a+b)*c
---
(source_file
 (binary_expression
  (parenthesized_expression
   (binary_expression
    (identifier)
    (identifier)))
  (identifier)))

========================
expression calling
========================
a + (b)(c)
---
(source_file
 (binary_expression
  (identifier)
  (call
   (parenthesized_expression
    (identifier))
   (argument_list
    (identifier)))))


========================
more expression calling
========================
a(1)()
a()(1)
a + b() * c
---
(source_file
 (call
  (call
   (identifier)
   (argument_list
    (number)))
  (argument_list))
 (call
  (call
   (identifier)
   (argument_list))
  (argument_list
   (number)))
 (binary_expression
  (identifier)
  (binary_expression
   (call
    (identifier)
    (argument_list))
   (identifier))))


========================
blocks
========================
{ a 1 }
let a = {
  let b = 1
  let c = 2
  b + c
}
b + { 1 }
{ 3 * 4 } + 1
---
(source_file
 (block
  (identifier)
  (number))
 (variable_declaration
  (identifier)
  (block
   (variable_declaration
    (identifier)
    (number))
   (variable_declaration
    (identifier)
    (number))
   (binary_expression
    (identifier)
    (identifier))))
 (binary_expression
  (identifier)
  (block
   (number)))
 (binary_expression
  (block
   (binary_expression
    (number)
    (number)))
  (number)))


========================
lambda expression
========================
fn(){}
let foo = fn(a) {
  a b c
}
let adder = fn (a) {
  fn(b) { a + b }
}
let add5 = adder(5)
print(add5(37))
---
(source_file
 (lambda
  (parameter_list)
  (function_body))
 (variable_declaration
  (identifier)
  (lambda
   (parameter_list
    (identifier))
   (function_body
    (identifier)
    (identifier)
    (identifier))))
 (variable_declaration
  (identifier)
  (lambda
   (parameter_list
    (identifier))
   (function_body
    (lambda
     (parameter_list
      (identifier))
     (function_body
      (binary_expression
       (identifier)
       (identifier)))))))
  (variable_declaration
   (identifier)
   (call
    (identifier)
    (argument_list
     (number))))
  (call
   (identifier)
   (argument_list
    (call
     (identifier)
     (argument_list
      (number))))))
