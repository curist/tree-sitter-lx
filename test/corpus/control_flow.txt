==========================
if then else
==========================
if a {_}
if x {if x {_}}
if if x {_}{_}

let cond = random() > 0.5
let a = if cond { false } else true 
if cond {
  1
} else if cond2 {
  // since else_clause expecting an expression
  // we can just keep chaining `if` expression
  2
} else {
  3
}
---
(source_file
 (if
  (cond
   (identifier))
  (then_clause
   (identifier)))
 (if
  (cond
   (identifier))
  (then_clause
   (if
    (cond
     (identifier))
    (then_clause
     (identifier)))))
 (if
  (cond
   (if
    (cond
     (identifier))
    (then_clause
     (identifier))))
  (then_clause
   (identifier)))
  (variable_declaration
   (identifier)
   (binary_expression
    (call
     (identifier)
     (argument_list))
    (number)))
  (variable_declaration
   (identifier)
   (if
    (cond
     (identifier))
    (then_clause
     (boolean))
    (else_clause
     (boolean))))
  (if
   (cond
    (identifier))
   (then_clause
    (number))
   (else_clause
    (if
     (cond
      (identifier))
     (then_clause
      (comment)
      (comment)
      (number))
     (else_clause
      (block
       (number)))))))


==========================
while loop - basic
==========================
while true {_}
a = while x {_}
while while x {_} {_}
---
(source_file
 (while
  (cond
   (boolean))
  (block
   (identifier)))
 (assignment
  (identifier)
  (while
   (cond
    (identifier))
   (block
    (identifier))))
 (while
  (cond
   (while
    (cond
     (identifier))
    (block
     (identifier))))
  (block
   (identifier))))


==========================
while loop - nesting
==========================
let x = 1
let sum = 0
while (while x < 10 {
  x = x + 1
  sum = sum + x
  sum < 100
}) {
  defer x = 0
  print(sum)
}
// not sure if there's practical usage,
// but since `while` loop is also an expression,
// we can also nest `while` here
---
(source_file
 (variable_declaration
  (identifier)
  (number))
 (variable_declaration
  (identifier)
  (number))
 (while
  (cond
   (while
    (cond
     (binary_expression
      (identifier)
      (number)))
    (block
     (assignment
      (identifier)
      (binary_expression
       (identifier)
       (number)))
     (assignment
      (identifier)
      (binary_expression
       (identifier)
       (identifier)))
     (binary_expression
      (identifier)
      (number)))))
  (block
   (defer
    (assignment
     (identifier)
     (number)))
   (call
    (identifier)
    (argument_list
     (identifier)))))
  (comment)
  (comment)
  (comment))


==========================
for loop
==========================
let i
for i = 0; i < 10; i = i + 1 {_}

for let x = 0; true; {_}
for ; ; { print(endless) }

---
(source_file
 (variable_declaration
  (identifier))
 (for
  (init
   (assignment
    (identifier)
    (number)))
  (cond
   (binary_expression
    (identifier)
    (number)))
  (iter
   (assignment
    (identifier)
    (binary_expression
     (identifier)
     (number))))
  (block
   (identifier)))
 (for
  (init
   (variable_declaration
    (identifier)
    (number)))
  (cond
   (boolean))
  (block
   (identifier)))
 (for
  (block
   (call
    (identifier)
    (argument_list
     (identifier))))))


==========================
for loop - nesting
==========================
for ;; for;;{_} {_}
for ; for;;{_} ;{_}
for for;;{_} ;; {_}
for (for;;{_}) ;; {_}
---
(source_file
 (for
  (iter
   (for
    (block
     (identifier))))
  (block
   (identifier)))
 (for
  (cond
   (for
    (block
     (identifier))))
  (block
   (identifier)))
 (for
  (init
   (for
    (block
     (identifier))))
  (block
   (identifier)))
 (for
  (init
   (for
    (block
     (identifier))))
  (block
   (identifier))))

==========================
for loop - shortened
==========================
for x = x.parent; x {_}
---
(source_file
 (for
  (init
   (assignment
    (identifier)
    (value_access
     (identifier)
     (identifier))))
  (cond
   (identifier))
  (block
   (identifier))))

==========================
break / continue
==========================
break // out of block, just an identifier (XXX: how do we deal with reserved keywords?)
{ break continue }
while x { if _ { break } print(cont) }
---
(source_file
 (identifier)
 (comment)
 (block
  (break)
  (continue))
 (while
  (cond
   (identifier))
  (block
   (if
    (cond
     (identifier))
    (then_clause
     (break)))
   (call
    (identifier)
    (argument_list
     (identifier))))))

